\input texinfo  @c -*-texinfo-*-
@c ---------------------------------------------------------------------- @@
@c FICHIER               : idyl.texi                                      @@
@c AUTEUR                : Dominique Boucher                              @@
@c DATE DE CREATION      : Fri May 26 11:35:48 1995                       @@
@c DERNIERE MODIFICATION : Fri May 26 14:50:17 1995                       @@
@c ---------------------------------------------------------------------- @@
@c IDyl Reference Manual                                                  @@
@c ---------------------------------------------------------------------- @@
@setfilename idyl.info
@settitle IDyl, Manuel de l'utilisateur
@c %**end of header

@ifinfo
@format
START-INFO-DIR-ENTRY
* IDyl::                      A Dylan interpreter written in Scheme.
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@titlepage
@sp 10
@comment The title is printed in a large font.
@title IDyl
@subtitle A Dylan interpreter
@subtitle Version 0.1, May 1995
@author Dominique Boucher
    
@c The following two commands start the copyright page.                   @@
@page

@vskip 0pt plus 1filll
Copyright @copyright{} 1995, Dominique Boucher

IDyl can be freely distributed or modified as long as the copyright
notices are retained in full in the copies and on all parts of
derivative work, but it cannot be transferred for compensation. 

@c Commercial licences can be obtained by sending email to the following  @@
@c internet address: @code{boucherd@iro.umontreal.ca}                     @@

@end titlepage

@node     Top,     ,      (dir),   (dir)
@comment  node-name,  next,  previous,  up
@chapter Overview

@noindent 
IDyl is an interpreter for a language resembling Dylan (trademark of
Apple Computer). It is a first step towards the implementation of a
production quality compiler for Dylan. It is currently being developed
by Dominique Boucher, Marc Feeley, Marco Jacques, Jacques
Malenfant, and Manuel Serrano.

Although IDyl provides a few extensions to Dylan, there are many
features that are missing.  IDyl is essentially a pedagogical tool,
primarily intended for the exploration of the Dylan language and its
implementation. It should be kept in mind that IDyl is still
experimental and is not meant for production use.

The latest version of IDyl can be obtained through the INTERNET
from the following anonymous FTP site:

	@code{ftp.iro.umontreal.ca:pub/parallele/idyl/idyl-0.1}

@noindent Comments, questions, and bug reports are welcome and should be
sent to: 

	@code{boucherd@@iro.umontreal.ca}

@menu
* Compiling IDyl::    How to compile the interpreter.
* The REPL::          The Read-Eval-Print loop.
* Differences::       Differences with the DIRM.
* Extensions::        Extensions to the DIRM.
* Index::             The index.
@end menu

@node Compiling IDyl, The REPL, Top, Top
@chapter Compiling IDyl

@noindent The interpreter can be built using one of the following Scheme
compilers: 

@itemize @bullet
@item Bigloo 1.7 or later
@item Gambit-C 2.2 or later
@end itemize

Here are the steps to follow in order to properly install IDyl:

@enumerate
@item 
Edit the Makefile to suit your needs. The following variables
should be changed: @code{A.OUT}, @code{SCMCONFIGDIR},
@code{INSTALL_DIR}, @code{LIB_DIR}, @code{INSTALL}, @code{CC},
@code{GAMBIT}, @code{BIGLOO}, and @code{MKAFILE}.
@item 
Run @code{make config} to configure the interpreter.
@item 
Run @code{make bigloo} or @code{make gambit} to build the
interpreter. 
@item 
Run @code{make install} to install the libraries.
@end enumerate

@node     The REPL,   Differences, Compiling IDyl, Top
@comment  node-name,  next,  previous,  up
@chapter  The Read-Eval-Print loop.

@noindent

IDyl is invoked using the following command:

@example
idyl [-emacs] [f1 f2 f3 ...]
@end example

IDyl first reads a few files (its standard library) and then starts the
Read-Eval-Print loop (REPL). If user filenames were supplied on the
command-line, these files are loaded just before IDyl starts the
REPL. The only option recognized by IDyl (@code{-emacs}) will be
explained below.  If IDyl is compiled with Gambit-C, you can also
specify the stack size, the heap size, and the size of the constant area
using the appropriate command-line option.

It should be noted that in contrast to most interpreters, IDyl does not
display a prompt that tells the user it is ready for
evaluation. Instead, the user enters an expression or a declaration and
then presses @code{return}. The interpreter then evaluates the
expression or declaration and displays the result prefixed by @code{//}.

It is also possible to feed the interpreter with an expression (or
multiple expressions) that span more than one line. To do this, the
first line of input should end with a backslash character
(@code{\}). This tells the interpreter to switch to multi-line mode. To
send the input to the interpreter, the user must enter @code{<Ctrl-D>}
on a new line. Here is a sample interaction:

@example
% idyl @emph{<cr>}
/*********************************/
/** IDyl v0.1    (05/25/95)     **/
/** Entering Dylan REP loop     **/
/** Type `quit ()' to exit      **/
/*********************************/
#"foo" @emph{<cr>}
// value = #"foo"
1 + 2 @emph{<cr>}
// value = 3
define class <a> (<object>) \@emph{<cr>}
  slot a; @emph{<cr>}
end ; @emph{<cr>}
@emph{<cr>}
define variable x = make (<a>) ; @emph{<cr>}
@emph{<^D>}
// value = @{class <A>@}
// value = #f 
quit () @emph{<cr>}
% 
@end example
 

The @code{-emacs} command-line option can be used to switch to the
multi-line mode by default (as used by the Emacs mode for IDyl). In this
case, it is not necessary to enter the backslash character and a
@code{<Ctrl-D>} character must end the input to send to the interpreter.


@node     Differences, Extensions,   The REPL,       Top
@comment  node-name,    next,     previous,  up
@chapter Differences with the DIRM

Here are the features that appear in the DIRM (Dylan Interim Reference
Manual) that are missing in IDyl:

@itemize @bullet
@item Modules and libraries.

Modules and libraries are not yet supported by IDyl. Files
containing library and module declarations are parsed by IDyl but
these declarations are ignored by the interpreter. 

@item Return values.

Currently, there is no type-checking on return values; the number of
values returned is not checked either.

@item Collections.

Several methods and generic functions that relate to the collection
heterarchy have not yet been implemented. All the classes in the
heterarchy are defined, but few are actually instantiable. The
following classes are fully implemented: @code{<array>},
@code{<vector>}, @code{<simple-object-vector>},
@code{<string>}, @code{<byte-string>}, @code{<list>}, @code{<pair>}, and
@code{<empty-list>}. The other classes can be instantiated, but using them may
cause unpredictable behavior.

@item Numbers.

Only @code{<integer>} and @code{<double-float>} are instantiable
classes.  

@item Controlling dynamism.

IDyl can parse the adjectives that control the dynamism of Dylan's
functions and classes, but it doesn't make use of them. So
you can subclass a predefined sealed class, but the result is
unpredictable.

@item The @code{make} generic function.

@code{make} has not been specialized on @code{<class>} and
@code{<generic-function>} so it is not possible to dynamically create
new classes and generic functions. All classes and generic functions
must be defined using the @code{define class} and @code{define
generic} defining forms. 

@item The class precedence list computation algorithm.

With each class is associated a class precedence list (CPL). The CPL
of a class A is a list which contains all the superclasses of A in
some order. In IDyl, the CPL is computed by a monotonic algorithm
that differs from the CLOS algorithm described in the DIRM and that is
slightly more restrictive. I.e. some class heterarchies will be
rejected by IDyl, although they are acceptable by the CLOS
algorithm.

@end itemize

@node     Extensions,  Index, Differences, Top
@comment  node-name,  next,  previous,     up

@chapter  Extensions to the DIRM

IDyl provides a few functions and one class that are not described in
the DIRM. These are listed below.

@deffn Function quit @result{} never returns
This function exits the interpreter. 
@end deffn 

@deffn Function load byte-string @result{} @code{#f}
@cindex @code{load}
@cindex Loading a file
Loads the file specified by the argument. All the expressions and
declarations contained in the file are evaluated (in the same order as
they appear).
@end deffn


@deffn Function reset-environment @result{} @code{#f}
@cindex @code{reset-environment}
@cindex environment reinitialization
This function resets the global environment to its initial state (when
the interpreter was launched). 
@end deffn

@deffn Function printf byte-string #rest args @result{} @code{#f}
@cindex @code{printf}

This function is similar to the C @code{printf} function. The first
argument is a string template in which values can be inserted (see the
DIRM format string specification, p. 152, for the format
directives). The remaining arguments are those values that will be
inserted in the format string. 
@end deffn

@deffn {Instantiable class} <window>
@cindex @code{<window>}
@cindex X windows
It is possible to open windows under X-Windows. All windows are direct
instances of class @code{<window>}. Windows are opened at instance
creation time (i.e. in @code{make}). The recognized initialization
arguments are: @code{name:}, an instance of @code{<byte-string>}, is the
name of the window (mandatory); @code{<width>}, an instance of
@code{<integer>}, is the width of the window in pixels (default = 100);
@code{height:}, an instance of @code{<integer>}, is the height of the
window in pixels (default = 100).

@end deffn

@deffn {Generic function} close window @result{} @code{#f}
@cindex close
This functions closes the specified window and returns @code{#f}. It
signals a @code{<simple-warning>} condition if the window is already
closed.
@end deffn

@deffn {Generic function} draw-line window col x1 y1 x2 y2 @result{} @code{#f}
This functions draws a line between two points @code{(x1, y1)} and
@code{(x2, y2)} in the window @code{window}. The line drawn is of color
@code{col}. All the arguments must be instances of @code{<integer>},
except @code{window}, which must be a instance of @code{<window>}.
@code{draw-line} signals a condition of type @code{<simple-warning>} if
the window is closed.
@end deffn

@ifinfo
@node     Index,      ,      Extensions, Top
@comment  node-name,  next,  previous,    up
@chapter Index
@printindex cp
@end ifinfo

@contents
@bye
