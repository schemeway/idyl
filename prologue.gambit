;; ---------------------------------------------------------------------- ;;
;; FICHIER               : prologue.gambit                                ;;
;; DATE DE CREATION      : Mon May 29 09:54:00 1995                       ;;
;; DERNIERE MODIFICATION : Mon May 29 09:54:16 1995                       ;;
;; ---------------------------------------------------------------------- ;;
;; Copyright (c) 1995 Dominique Boucher                                   ;;
;; ---------------------------------------------------------------------- ;;
;; Gambit-C specific macros ...                                           ;;
;; ---------------------------------------------------------------------- ;;

;; ---------------------------------------------------------------------- ;;
;; ***** DO NOT EDIT BELOW THIS LINE *****                                ;;
;; ---------------------------------------------------------------------- ;;

(##define-macro (def-struct name . field-defs)
  `(define-structure ,name ,@field-defs))

(define-macro (bind-exit proc . body)
  `(call-with-current-continuation
    (lambda ,proc
      ,@body)))

(define-macro (catch-signals thunk)
  `(begin
     (set! ##user-interrupt 
	   (lambda () (dylan:error "user interrupt ...")))
     (with-exception-handler
      (lambda (type)
	(dylan:error type))
      ,thunk)))

(define-macro (call/cc proc . body)
  `(call-with-current-continuation ,proc))

(define-macro (dylan:string->symbol str)
  `(string->symbol 
    (list->string 
     (map char-downcase 
	  (string->list ,str)))))

(define-macro (secure-open-input-file str)
  `(##open-input-file ,str))

(define-macro (lst? v)
  `(let ((v ,v))
     (or (null? v) (pair? v))))


(define-macro (main)
  `(dylan:repl (command-line)))

;; (define-macro (fix:+ x1 x2) `(##fixnum.+ ,x1 ,x2))                     ;;
;; (define-macro (fix:- x1 x2) `(##fixnum.- ,x1 ,x2))                     ;;
;; (define-macro (fix:* x1 x2) `(##fixnum.* ,x1 ,x2))                     ;;
;; (define-macro (fix:< x1 x2) `(##fixnum.< ,x1 ,x2))                     ;;
;; (define-macro (fix:= x1 x2) `(##fixnum.= ,x1 ,x2))                     ;;
;; (define-macro (fix->flo x1) `(##flonum.<-fixnum ,x1))                  ;;
(define-macro (fix:+ x1 x2) `(+ ,x1 ,x2))
(define-macro (fix:- x1 x2) `(- ,x1 ,x2))
(define-macro (fix:* x1 x2) `(* ,x1 ,x2))
(define-macro (fix:< x1 x2) `(< ,x1 ,x2))
(define-macro (fix:= x1 x2) `(= ,x1 ,x2))
(define-macro (fix->flo x1) `(exact->inexact ,x1))
(define-macro (flo:+ x1 x2) `(##flonum.+ ,x1 ,x2))
(define-macro (flo:- x1 x2) `(##flonum.- ,x1 ,x2))
(define-macro (flo:* x1 x2) `(##flonum.* ,x1 ,x2))
(define-macro (flo:/ x1 x2) `(##flonum./ ,x1 ,x2))
(define-macro (flo:< x1 x2) `(##flonum.< ,x1 ,x2))
(define-macro (flo:= x1 x2) `(##flonum.= ,x1 ,x2))

(declare
; (extended-bindings)
; (standard-bindings)
 (safe)
; (block)
)

;; --- Fin du prologue pour Gambit-C ------------------------------------ ;;

